---
title: "Class 13: RNA-Seq analysis mini-project"
author: "Danika"
format: pdf
---
# Data Import

The data for the hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

> Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1.

```{r}
library(DESeq2)
```



```{r}
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"

# Import metadata and take a peak
colData = read.csv(metaFile, row.names=1)
head(colData)
```


```{r}
# Import metadata and take a peak
colData = read.csv(metaFile, row.names=1)
head(colData)
```

```{r}
# Import countdata
countDataTmp = read.csv(countFile, row.names=1)
head(countDataTmp)
```
> Q1. Complete the code below to remove the troublesome first column from countData

```{r}
# Note we need to remove the odd first $length col
countData <- as.matrix(countDataTmp[,-1])
head(countData)
```

Check that my metadata and count data match

```{r}
rownames(colData) == colnames(countData)
```
>Q2. Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

```{r}
#head(countData)

to.keep <- rowSums(countData) != 0
countData <- countData[to.keep,]

nrow(countData)
head(countData)
```

#DESeq analysis

```{r}
#| message: false
library(DESeq2)
```


```{r}
head(colData)
```

Setup the object that DESeq needs for analysis withh the lovely long -winded function:

```{r}
dds <- DESeqDataSetFromMatrix (countData=countData,
                        colData=colData,
                        design=~condition)
```

Run the analysis
```{r}
dds <- DESeq(dds)
res <- results(dds)

res
```

log2 fold change (MLE): condiditon hoxa1 kd vs control sirna

```{r}
res = results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
```

> Q3. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```


# Volcano plot

```{r}
plot(res$log2FoldChange, -log(res$padj))
```

Make some colors to highlight the subset of genes with high fold change values 

> Q4. Improve this plot by completing the below code, which adds color and axis labels

```{r}
mycols <- rep("grey", nrow(res))
mycols[abs(res$log2FoldChange)>2] <- "pink"
mycols[res$padj>0.05]="grey"

plot(res$log2FoldChange, -log(res$padj), col=mycols)
abline(v=c(-2,2), lty=2)
```

> Q5. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

# Add gene annotation data

We will load up AnnotationDbi and our Human data package to add gene symbols and entrez IDs to our results objects.

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

# Genset enrichment analysis (pathway analysis)

```{r}
columns(org.Hs.eg.db)
```


```{r}
res$symbol = mapIds(org.Hs.eg.db,
                    keys=rownames(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL"
                    )

res$entrez = mapIds(org.Hs.eg.db,
                    keys=rownames(res),
                    keytype="ENSEMBL",
                    column="ENTREZID"
                    )

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME"
                    )

head(res, 10)
```

> Q6. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```


# KEGG Pathway

```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

```{r}
library(pathview)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$less)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```
> Q7. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

![](hsa04110.pathview.png)
![](hsa03030.pathview.png)
![](hsa03013.pathview.png)
![](hsa03440.pathview.png)
![](hsa04114.pathview.png)

## Gene Ontology

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```














