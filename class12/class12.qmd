---
title: "Class 12: Transcriptomics and the analysis of RNA-Seq data"
author: "Danika"
format: pdf
---

## RNASeq Analysis


## Import Data
```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

Have a wee look at these
```{r}
head(counts)
```

> Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```


> Q2. How many ‘control’ cell lines do we have?

```{r}
ncol(counts)
```
4 treated and 4 control

and the metadata a.k.a "colData"

```{r}
(metadata)
```
Let's make sure that the id column of the metadata match the order of the columns in the countsData

```{r}
metadata$id
colnames(counts)
```
```{r}
metadata$id==colnames(counts)
```

We can use the `all` function to check that all it's inputs are TRUE

```{r}
all(c(T,T,T,F))
```

```{r}
all(c(metadata$id==colnames(counts)))
```

# Analysis by Hand

Let's first extract our counts for control samples as I want to compare this to the counts for treated (i.e. with drug) samples.

```{r}
control.inds <- metadata$dex=="control"
control.ids <- metadata$id[control.inds]
control.counts <- counts[,control.ids]
head(control.counts)
```

I want a single summary counts value for each gene in the control experiments. I will start by taking the average.
```{r}
#apply(control.counts,1,mean)
control.mean <- rowMeans(control.counts)
```

library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)

> Q3. How would you make the above code in either approach more robust?

The code we used was more robust than the code that was given was more complicated and ours was more simple and had less line of code.

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds <- metadata$dex=="treated"
treated.ids <- metadata$id[treated.inds]
treated.counts <- counts[,treated.ids]
head(treated.counts)
```

```{r}
treated.mean <- rowMeans(treated.counts)
```

To help us stay organized let's make a new data.frame to store these results together.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
head(meancounts)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

And make a wee plot to see how we are doing

```{r}
plot(meancounts$control.mean, meancounts$treated.mean)
```
 > Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?
 
```{r}
library(ggplot2)
```

```{r}
ggplot(meancounts)+
  aes(meancounts$control.mean, meancounts$treated.mean)+
  geom_point()
```


 

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts$control.mean, meancounts$treated.mean, log="xy")
```

The most useful and the most straightforward to understand is log2 transform.

```{r}
log2(20/20)
```
no change

Doubling

```{r}
log2(40/20)
```
expression went up

```{r}
log2(10/20)
```
expression went down

```{r}
log2(80/20)
```
Add a "log2 fold-change"

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
```

```{r}
head(meancounts)
```

Hmm... we need to get rid of the genes where we have no count data as taking the log 2 of these 0 counts does not tell us anything

```{r}
head(meancounts)
```

```{r}
head(meancounts==0)
```

```{r}
to.keep <- rowSums(meancounts[,1:2]==0)==0

mycounts <- meancounts[to.keep,]
head(mycounts)
```

```{r}
nrow(mycounts)
```

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```


> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The purpose of the arr.ind argument in the which () function call above is to return both the row and column indices (i.e. positions) where there are TRUE values. In this case this will tell us which genes (rows) and samples (columns) have zero counts. The unique function is used so we don't count any row twice if it has zero entries in both columns


> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

How many genes are up regulated at the log2fc level of +2
```{r}
sum(mycounts$log2fc>=+2)
```

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 


```{r}
sum(mycounts$log2fc<=-2)
```

> Q10. Do you trust these results? Why or why not?

I do not trust these results because they are not statistics, just the counts of how many are upregulated or downregulated


#DESeq2

```{r}
#| message: false
library(DESeq2)
```

Like most bioconductor packaged DESeq wants it's input and output in a very specific format.

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

The main DESeq function is cvalled DESeq
```{r}
dds <- DESeq(dds)
```
```{r}
res <- results(dds)
head(res)
```


#Volcano plots

A major summary figure of this type of analysis is called a volcano plot- the idea here is to keep our inner biologist and inner stats person happy with one cool plot!


```{r}
plot(res$log2FoldChange, res$padj)
```

Improve this plot by taking the the log of that p-value axis.

```{r}
plot(res$log2FoldChange, log(res$padj))
```

I want to flip this y-axis so the values I care about (i.e. the low p-value or high log(p-values)) are at the top of this axis

```{r}
plot(res$log2FoldChange, -log(res$padj))
```

Let's finish up for today by adding some color to better highlight the subset of genes that we will focus on next day - i.e. those with big log2fc values (at +2/-2 threshold) and significant p-values (less than 0.05 for example).

```{r}
mycols <- rep("grey", nrow(res))
mycols[abs(res$log2FoldChange)>=2] <- "pink"
mycols[res$padj>0.05] <- "gray"
```

```{r}
plot(res$log2FoldChange, -log(res$padj), col=mycols)
abline(v=c(-2,2),lty=2)
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "light blue" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "pink"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

## Gene annotation

We will use one of Bioconductor’s main annotation packages to help with mapping between various ID schemes. Here we load the `AnnotationDbi` package and the annotation data package for humans `org.Hs.eg.db.`

```{r}
head(res)
#rownames(res)
```


```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

Look at what types of IDs I can translate between from the `org.Hs.eg.db` package with the `columns()` function

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(x= org.Hs.eg.db,
                     column="SYMBOL",
                     keys=row.names(res),
                     keytype="ENSEMBL",
                    )
```
> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

and do the same for ENTREZID and GENENAME
```{r}
res$entrez <- mapIds(x=org.Hs.eg.db,
                     column="ENTREZID",
                     keys=row.names(res),
                     keytype="ENSEMBL")
```

```{r}
res$genename <- mapIds(x= org.Hs.eg.db,
                     column="GENENAME",
                     keys=row.names(res),
                     keytype="ENSEMBL"
                    )
```
```{r}
res$uniprot <-mapIds(x= org.Hs.eg.db,
                     column="UNIPROT",
                     keys=row.names(res),
                     keytype="ENSEMBL"
                    )
```

```{r}
head(res)
```



# Pathway analysis

We will finish this lab with a quick pathway analysis. Here we play with jsut the **GAGE package**

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```
The main `gage()` function requires a names vector of fold changes, where the names of the values are the Entrez gene IDs

```{r}
c(barry=4, clair=3, chandra=2)
```


```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Now let's run the gage pathway analysis.

```{r}
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

Now lets look at the object returned from `gage()`, i.e. our results here:

```{r}
attributes(keggres)
```

Let's pull up the higlighted parhways and show our differntually expressed genes on the pathway. I will use the "hsa" KEGG id to get the pathway from KEGG and my `foldchange` ventor to show my genes.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```
 Put this into my document.
 
 ![The Asthma Pathway with my highlighted differentially expressed genes in color](hsa05310.pathview.png)























